import Head from 'next/head'
import styled from 'styled-components'
import { useState } from 'react'
import Center from '../components/center'

const key = { 'X': 'X', 'O': 'O', 'x': 'X', 'o': 'O', 'f': '', 'F': '', '': '', ' ':''}

const Square = styled.div`
  width: 3rem;
  height: 3rem;
  border: 0px solid gray;
  text-align: center;
  font-size: 3rem;
  line-height: 1;
`
 // state: 1 open, 2 won/full, 3 off
const BoardContainer = styled.div`
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;

  width: ${ props => props.big ? 'calc(30rem + 16px)' : 'calc(9rem + 4px)' };
  height: ${ props => props.big ? 'calc(30rem + 16px)' : 'calc(9rem + 4px)' };
  text-align: center;

  background-color: ${props => props.state == 1 ? '#00000010' : props.state == 2 ? '#00000050' : 'white'};

  padding: ${ props => props.big ? '0rem' : '0.5rem' };

  border: 0px solid black;

  position: relative;


  div:nth-child(1) {
    border-right-width: 1px;
    border-bottom-width: 1px;
  }
  div:nth-child(2) {
    border-left-width: 1px;
    border-right-width: 1px;
    border-bottom-width: 1px;
  }
  div:nth-child(3) {
    border-left-width: 1px;
    border-bottom-width: 1px;
  }
  div:nth-child(4) {
    border-top-width: 1px;
    border-bottom-width: 1px;
    border-right-width: 1px;
  }
  div:nth-child(5) {
    border-width: 1px;
  }
  div:nth-child(6) {
    border-top-width: 1px;
    border-bottom-width: 1px;
    border-left-width: 1px;
  }
  div:nth-child(7) {
    border-right-width: 1px;
    border-top-width: 1px;
  }
  div:nth-child(8) {
    border-left-width: 1px;
    border-right-width: 1px;
    border-top-width: 1px;
  }
  div:nth-child(9) {
    border-left-width: 1px;
    border-top-width: 1px;
  }
`

const Overlay = styled.p`
  position: absolute;
  top: 50%;
  left: 50%;

  transform: translate(-50%, -50%);

  margin: 0;

  font-size: 10rem;
  font-weight: 300;
  opacity: 0.6;
`

const Msg = styled.p`
  font-size: 1.5rem;
  text-align: center;
`

export default function Home() {
  return (
    <div>
      <Head>
        <title>Tic Tac Toe</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.svg" />
      </Head>
      <GlobalBoard />
    </div>
  )
}

function LocalBoard(props) {
  const [board, status, handleClick] = useTicTacToeLogic(props.board, props.changeFunction, props.id)

  function onClick(e) {
    if (props.open) {
      handleClick(e.target.id, props.player)
    }
  }

  return (
    <BoardContainer borderWidth="1px" state={props.open && status === '' ? 1 : status !== '' ? 2 : 3}>
      {board.map((value, index) => (
        <Square onClick={onClick} id={index} key={index}>{value}</Square>
      ))}
      <Overlay>{props.winner}</Overlay>
    </BoardContainer>
  )
}

function GlobalBoard(props) {
  const [board, msg, open, player, handleClick, winners] = useUltimateTicTacToeLogic([["", "", "", "", "", "", "", "", ""], ["", "", "", "", "", "", "", "", ""], ["", "", "", "", "", "", "", "", ""], ["", "", "", "", "", "", "", "", ""], ["", "", "", "", "", "", "", "", ""], ["", "", "", "", "", "", "", "", ""], ["", "", "", "", "", "", "", "", ""], ["", "", "", "", "", "", "", "", ""], ["", "", "", "", "", "", "", "", ""]], "X")
  return (
    <Center>
      <div>
        <BoardContainer big>
          {board.map((value, index) => (
            <LocalBoard id={index} winner={key[winners[index]]} changeFunction={handleClick} board={value} open={open == index || open == 9} key={index} player={player} />
          ))}
        </BoardContainer>
        <br />
        <Msg>{msg}</Msg>
      </div>
    </Center>
  )
}

function useTicTacToeLogic(startBoard, changeFunction, boardIndex) {
  const [state, setState] = useState({
    board: startBoard,
    status: ''
  })

  function handleChange(index, player) {
    if (state.board[index] == "" && hasWon(state.board) == "" && isFull(state.board) == false) {
      let stateCopy = {...state};

      stateCopy.board[index] = player

      if (hasWon(stateCopy.board) !== "") {
        stateCopy.status = hasWon(stateCopy.board)
      } else if (isFull(stateCopy.board)) {
        stateCopy.status = 'f'
      }

      setState(stateCopy)

      changeFunction(stateCopy, boardIndex, index)
    }
  }

  return [state.board, state.status, handleChange]
}

function useUltimateTicTacToeLogic(startBoard, startPlayer) {
  const [state, setState] = useState({
    board: startBoard,
    boardStatus: ["", "", "", "", "", "", "", "", ""],
    open: 9,
    player: startPlayer,
    msg: `It's ${startPlayer}'s Turn`
  })

  function handleChange(board, index, squareIndex) {
    let stateCopy = { ...state };

    stateCopy.board[index] = board.board
    stateCopy.boardStatus[index] = board.status
    stateCopy.open = squareIndex

    if (stateCopy.boardStatus[stateCopy.open] !== '') {
      stateCopy.open = 9
    }

    if (hasWon(stateCopy.boardStatus) !== "") {
      stateCopy.msg = `${hasWon(stateCopy.boardStatus)} has won!`
      stateCopy.open = -1
    } else if (isFull(stateCopy.boardStatus)) {
      stateCopy.msg = "Tie game!"
      stateCopy.open = -1
    } else {
      if (stateCopy.player == "X") {
        stateCopy.player = "O";
        stateCopy.msg = `It's O's Turn`
      } else {
        stateCopy.player = "X";
        stateCopy.msg = `It's X's Turn`
      }
    }
    
    setState(stateCopy)
  }

  return [state.board, state.msg, state.open, state.player, handleChange, state.boardStatus]
}

function hasWon(board) {
  if (
    (board[0] == "X" ||
    board[0] == "O") &&
    board[0] == board[1] &&
    board[0] == board[2]
  ) {
    return board[0];
  } else if (
    (board[3] == "X" ||
    board[3] == "O") &&
    board[3] == board[4] &&
    board[3] == board[5]
  ) {
    return board[3];
  } else if (
    (board[6] == "X" ||
    board[6] == "O") &&
    board[6] == board[7] &&
    board[6] == board[8]
  ) {
    return board[6];
  } else if (
    (board[0] == "X" ||
    board[0] == "O") &&
    board[0] == board[3] &&
    board[0] == board[6]
  ) {
    return board[0];
  } else if (
    (board[1] == "X" ||
    board[1] == "O") &&
    board[1] == board[4] &&
    board[1] == board[7]
  ) {
    return board[1];
  } else if (
    (board[2] == "X" ||
    board[2] == "O") &&
    board[2] == board[5] &&
    board[2] == board[8]
  ) {
    return board[2];
  } else if (
    (board[0] == "X" ||
    board[0] == "O") &&
    board[0] == board[4] &&
    board[0] == board[8]
  ) {
    return board[0];
  } else if (
    (board[2] == "X" ||
    board[2] == "O") &&
    board[2] == board[4] &&
    board[2] == board[6]
  ) {
    return board[2]
  }
  return ""
}

function isFull(board) {
  return (
    board.filter(function (item) {
      return item !== ""
    }).length == 9
  );
}